// <auto-generated />
using System;
using DynamicData.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DynamicData.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200819035704_dbcontextmigrate")]
    partial class dbcontextmigrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DynamicData.Models.Authorization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LibraryID")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityGroupID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LibraryID");

                    b.HasIndex("SecurityGroupID");

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("DynamicData.Models.Field", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionButonOpenLibraryID")
                        .HasColumnType("int");

                    b.Property<int>("Deleted")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("Editable")
                        .HasColumnType("int");

                    b.Property<int?>("FieldTypeID")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ItemID")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryID")
                        .HasColumnType("int");

                    b.Property<string>("LookUpId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookUpValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookupTable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Visible")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActionButonOpenLibraryID");

                    b.HasIndex("FieldTypeID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LibraryID");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("DynamicData.Models.FieldLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditedByID")
                        .HasColumnType("int");

                    b.Property<int?>("FieldID")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LibraryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EditedByID");

                    b.HasIndex("FieldID");

                    b.HasIndex("LibraryID");

                    b.ToTable("FieldLog");
                });

            modelBuilder.Entity("DynamicData.Models.FieldType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FieldType");
                });

            modelBuilder.Entity("DynamicData.Models.FieldValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FieldID")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<Guid>("LibraryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FieldID");

                    b.HasIndex("ItemID");

                    b.ToTable("FieldValue");
                });

            modelBuilder.Entity("DynamicData.Models.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Deleted")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("DynamicData.Models.ItemFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemFile");
                });

            modelBuilder.Entity("DynamicData.Models.ItemLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditedByID")
                        .HasColumnType("int");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ItemID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EditedByID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemLog");
                });

            modelBuilder.Entity("DynamicData.Models.Library", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Deleted")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<int?>("EditedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LibraryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("MenuType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("OrderBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Visible")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("EditedByID");

                    b.HasIndex("LibraryTypeID");

                    b.HasIndex("ParentID");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("DynamicData.Models.LibraryLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EditedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LibraryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EditedByID");

                    b.HasIndex("LibraryID");

                    b.ToTable("LibraryLog");
                });

            modelBuilder.Entity("DynamicData.Models.LibraryType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LibraryType");
                });

            modelBuilder.Entity("DynamicData.Models.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Create")
                        .HasColumnType("int");

                    b.Property<int>("Delete")
                        .HasColumnType("int");

                    b.Property<int>("Read")
                        .HasColumnType("int");

                    b.Property<int>("Update")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("DynamicData.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DynamicData.Models.SecurityGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermissionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PermissionID");

                    b.ToTable("SecurityGroup");
                });

            modelBuilder.Entity("DynamicData.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DynamicData.Models.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RoleID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("DynamicData.Models.Authorization", b =>
                {
                    b.HasOne("DynamicData.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryID");

                    b.HasOne("DynamicData.Models.SecurityGroup", "SecurityGroup")
                        .WithMany()
                        .HasForeignKey("SecurityGroupID");
                });

            modelBuilder.Entity("DynamicData.Models.Field", b =>
                {
                    b.HasOne("DynamicData.Models.Library", "ActionButonOpenLibrary")
                        .WithMany()
                        .HasForeignKey("ActionButonOpenLibraryID");

                    b.HasOne("DynamicData.Models.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeID");

                    b.HasOne("DynamicData.Models.Item", "Item")
                        .WithMany("Fields")
                        .HasForeignKey("ItemID");

                    b.HasOne("DynamicData.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryID");
                });

            modelBuilder.Entity("DynamicData.Models.FieldLog", b =>
                {
                    b.HasOne("DynamicData.Models.User", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedByID");

                    b.HasOne("DynamicData.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldID");

                    b.HasOne("DynamicData.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryID");
                });

            modelBuilder.Entity("DynamicData.Models.FieldValue", b =>
                {
                    b.HasOne("DynamicData.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldID");

                    b.HasOne("DynamicData.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DynamicData.Models.ItemFile", b =>
                {
                    b.HasOne("DynamicData.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DynamicData.Models.ItemLog", b =>
                {
                    b.HasOne("DynamicData.Models.User", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedByID");

                    b.HasOne("DynamicData.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID");
                });

            modelBuilder.Entity("DynamicData.Models.Library", b =>
                {
                    b.HasOne("DynamicData.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID");

                    b.HasOne("DynamicData.Models.User", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedByID");

                    b.HasOne("DynamicData.Models.LibraryType", "LibraryType")
                        .WithMany()
                        .HasForeignKey("LibraryTypeID");

                    b.HasOne("DynamicData.Models.Library", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("DynamicData.Models.LibraryLog", b =>
                {
                    b.HasOne("DynamicData.Models.User", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedByID");

                    b.HasOne("DynamicData.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryID");
                });

            modelBuilder.Entity("DynamicData.Models.Role", b =>
                {
                    b.HasOne("DynamicData.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("DynamicData.Models.SecurityGroup", b =>
                {
                    b.HasOne("DynamicData.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionID");
                });

            modelBuilder.Entity("DynamicData.Models.UserRole", b =>
                {
                    b.HasOne("DynamicData.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("DynamicData.Models.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
