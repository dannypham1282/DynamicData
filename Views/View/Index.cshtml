
@{ ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml"; }



<div class="card card-default">
    <div class="card-header card-warning card-outline">
        <h3 class="card-title" id="viewCardTitle">
            @Html.RenderAction("BreadCrumbs", "View")
        </h3>
        <div class="card-tools">
            <div class="btn-group position-relative">
                <button type="button" class="btn btn-outline-danger btn-sm dropdown-toggle dropdown-hover" data-toggle="dropdown">
                    <i class="fa fa-sm fa-cog"></i>
                </button>
                <div class="dropdown-menu dropdown-menu-right" role="menu">
                    <a class="dropdown-item" href="#" onclick="showFieldModal('@Url.Action("_FieldAction","Partial")', 0, 'mFieldAction', 'formField','@ViewData["libGuid"]'); return false;"><i class="fas fa-plus"></i> Add New Field</a>
                    <a class="dropdown-item" href="#" id="editFieldMode" onclick="setEditFieldMode()"><i class="fas fa-cog"></i> Edit Field Mode</a>
                    <a class="dropdown-item" href="#" onclick="viewLinkLibrary()"><i class="fas fa-link"></i> Link Libraries</a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="#"><i class="fas fa-house-user"></i> Set Permission</a>
                </div>
                &nbsp;<button type="button" class="btn btn-outline-success btn-sm btnCancelEditMode" title="Cancel Edit Mode" style="display:none" onclick="setEditFieldMode()">
                    <i class="fas fa-reply-all"></i>
                </button>

            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-12">
                <table id="viewData" class="table table-striped table-bordered" cellspacing="0" width="100%">
                    <thead><tr></tr></thead>
                </table>
                <table>
                    <tr><td height="10" width="10" class="editdisable" style="padding:0.1rem"></td><td width="5"></td><td><b> *note: none edit cell</b></td><td></td><td height="10" width="10" class="editdisable"></td></tr>
                </table>

                <div class="modal left fade" id="mFieldAction" tabindex="" role="dialog" aria-labelledby="mFieldActionLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
                </div>



                <div class="modal fade" id="modelDeleteFieldConfirm" aria-modal="true" data-backdrop="static" data-keyboard="false">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title">Comfirmation</h4>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                            <div class="modal-body" id="mConfirmBody">
                                <p>Are you sure you want to  delete?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-danger" data-dismiss="modal" onclick="doDeleteField()">Yes</button>
                                <button type="button" class="btn btn-outline-primary" data-dismiss="modal">No</button>
                            </div>
                        </div>
                        <!-- /.modal-content -->
                    </div>
                    <!-- /.modal-dialog -->
                </div>
            </div>

            <div class="modal fade" id="modelLinkLibrary" aria-modal="true" data-backdrop="static" data-keyboard="false">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title">Link Another Library</h4>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>
                        <div class="modal-body" id="divLinkBody">

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-primary" onclick="AddLinkToLibrary()">Link</button>
                            <button type="button" class="btn btn-outline-danger" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                    <!-- /.modal-content -->
                </div>
                <!-- /.modal-dialog -->
            </div>
        </div>

    </div>
</div>

@section scripts {
    <script>
        var editor; // use a global for the submit and return data
        var viewTable;
        var editCellUrl = "@Url.Action("UpdateCell", "View")/@ViewData["libGuid"]";
       // getDataTableColumns();
        var rowGroup;
        var defaultSort;
        var sortDirection;
        var fieldEditMode = 0;
        var colReorder = false;
        var multilSort = [];
        var isSorted = true;
        var keysColumn = "";
        var allFields = [];
        $(document).ready(function () {
            $.fn.dataTable.moment('MM/DD/YYYY');
            $.fn.dataTable.moment('D-MMM-YY');
            initialDataTable();
            $("#viewData").find(' thead tr:eq(0)').remove();
           // $(".buttons-edit").removeClass("dt-button buttons-selected buttons-edit").addClass("btn btn-sm btn-success").html("<i class=\"fa fa-pencil\"></i><span> Edit </span>");
           // $(".buttons-remove").removeClass("dt-button buttons-selected buttons-remove ").addClass("btn btn-sm btn-danger").html("<i class=\"fa fa-trash\"></i><span> Delete </span>");
        });

        var noeditCol;
        function initialDataTable() {
            var changetext;
            var selectedTD;
            var cellNewValue;
            var selectedCellTD;

            $('#viewData thead tr').empty();
              editor = new $.fn.dataTable.Editor({
                ajax:
                {
                    dataType: 'json',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    create: {
                        type: 'POST',
                        url: editCellUrl,
                        success: function (res) {
                            if (res.result) {
                                toastr.success(res.result);
                                $('#viewData').DataTable().ajax.reload();
                            }
                        }
                    },
                      edit: {
                        type: 'POST',
                              url: editCellUrl,
                              data: function(data) {
                                //  console.log(data)
                              },
                          success: function (res) {
                              if (res.status != 'noaction') {
                                  if (res.status) {
                                      $('#viewData').DataTable().ajax.reload();
                                      toastr.success(res.result);
                                  }
                                  else {
                                      toastr.error(res.result);
                                  }
                              }
                        }
                    },
                    remove: {
                        type: 'POST',
                        url: editCellUrl,
                        success: function (res) {
                            $('#viewData').DataTable().ajax.reload();
                            toastr.success(res.result);
                        }
                    },
                },
                idSrc: 'id',
                table: "#viewData",
                fields: GetAjax('@Url.Action("DataTableColEditor", "View")', '{"guid": "@ViewData["libGuid"]"}').result
              });

            var lastEditControl;
            editor.on('open', function (e, type) {
                $(".form-control").last().parents('td').last().addClass("selectEditedCell");
                lastEditControl = $(".form-control").last();
                $(".form-control").last().on("change", function () {
                    cellNewValue = $(".form-control").last().val();
                });
            });
            editor.on('closed', function (e, node, data, items, type) {
                $(".selectEditedCell").removeClass("selectEditedCell").html(cellNewValue);
            });

            if (fieldEditMode == 1) {
                isSorted = false;
            }
            else {
                isSorted = true;
            }
            viewTable = $('#viewData').DataTable({
                //fixedHeader: true,
                scrollY:650,
                colReorder: colReorder,
                //"ordering": isSorted,
                "ordering": isSorted,
                //stateSave: true,
                "aLengthMenu": [[25, 50, 100,200,250,300,350,400, -1], [ 25, 50, 100,200,250,300,350,400, "All"]],
                "language": {
                    "emptyTable": "No data available in table"
                },
                dom: "Blfrtip",
                columns: getDataTableColumns(),
                keys: {
                    columns: ':not(:first-child)' + keysColumn,
                    editor: editor
                },
                aaSorting: multilSort,//[[defaultSort, sortDirection],["4","asc"]],
               // orderFixed: [[defaultSort, 'desc']],
                rowGroup: {
                    dataSrc: rowGroup,
                    endRender: function (rows, group) {
                        var headerCount = new Array($("#viewData thead tr th").length).fill("");
                        console.log(group)
                        $("#viewData thead tr th.classCurrency").each(function () {
                            var colName = $(this)[0].innerText.toLowerCase();
                            var indexCurrency = $(this).index();
                            var sum = 0;
                            rows.rows().data().filter(function (value, index) {
                                sum += value[rowGroup] === group ? parseFloat(value[colName]) : 0;
                                console.log(sum)
                            });
                            headerCount[indexCurrency] = accounting.formatMoney(sum) //$.fn.dataTable.render.number(',', '.', 0, '$').display(sum);
                        });

                        var returnTD = $('<tr/>');
                        for (i = 0; i < headerCount.length; i++) {
                            if (headerCount[i] != "") {//#C82333
                                if (headerCount[i].indexOf("(") > -1) {
                                    returnTD.append('<td class="classCurrencySum" >Total: <span style="color:#C82333">' + headerCount[i] + "</span></td>");
                                }
                                else {
                                    returnTD.append('<td class="classCurrencySum" >Total: ' + headerCount[i] + "</td>");
                                }
                            }
                            else
                                returnTD.append("<td></td>");
                        }
                        return returnTD;
                    }
                },
                select: {
                    style: 'os',
                    selector: 'td:first-child',
                    blurable: true
                 },
                buttons: [
                    {
                        extend: "print",
                        exportOptions: {
                            columns: ':visible:not(:first-child)',
                            format: {
                                header: function (data, columnIdx) {
                                    if (columnIdx == 1) {
                                        return 'column_1_header';
                                    }
                                    else {
                                        return data;
                                    }
                                }
                            }
                            // columns: 'th:not(:last-child)'
                        }
                    },
                    {
                        extend: "pdfHtml5",
                        orientation: 'landscape',
                        pageSize: 'LEGAL',
                        exportOptions: {
                            columns: ':visible:not(:first-child)',
                            format: {
                                header: function (data, columnIdx) {
                                    if (columnIdx == 1) {
                                        return 'column_1_header';
                                    }
                                    else {
                                        return data;
                                    }
                                }
                            }
                            // columns: 'th:not(:last-child)'
                        }
                    },
                    ,
                    {
                        extend: "excel",
                        exportOptions: {
                            columns: ':visible:not(:first-child)',
                            format: {
                                header: function (data, columnIdx) {
                                    if (columnIdx == 1) {
                                        return 'column_1_header';
                                    }
                                    else {
                                        return data;
                                    }
                                }
                            }
                            // columns: 'th:not(:last-child)'
                        }
                    },
                   // 'copy', 'csv', 'excel', 'pdf', 'print',
                    { extend: "create", editor: editor },
                  //  { extend: "edit", editor: editor },
                  //  { extend: "remove", editor: editor }
                 ],
                "createdRow": function (row, data, index) {
                   //  console.log(row)
                    var tdIndex = $(row).find("td.sysdelete").index();
                    var currencyIndex = $(row).find("td.classCurrency").index();
                    var percentageIndex = $(row).find("td.classPercentage").index();
                    var buttunIndex = $(row).find("td.classButton").index();

                     if (tdIndex > -1) {//insert delete button
                         var td = $(row).find("td.sysdelete");
                         td.html("<button class=\"btn btn-xs btn-danger btn_removerow\" ><i class=\"fa  fa-trash\"></i></button>");
                     }

                    //set currency column
                    if (currencyIndex > -1) {
                        $(row).find("td.classCurrency").each(function () {
                            if ($(this).html().indexOf("-") > -1)
                                $(this).css("color", "red");
                            $(this).html(accounting.formatMoney($(this).html()));
                        })
                    }

                    //set percentage column
                    if (percentageIndex > -1) {
                        $(row).find("td.classPercentage").each(function () {
                            $(this).html(percentageFormat($(this).html()));
                        });
                    }

                    if (buttunIndex > -1) {
                        $(row).find("td.classButton").each(function () {
                            var $tdClass = $(this).attr("class").split(' ');
                            var buttonName;
                            $.each($tdClass, function (key, value) {
                                if (value.indexOf("buttonName_") > -1) {
                                    buttonName = value.replace("buttonName_", "").replace("_"," ");
                                    return false;
                                }
                            });
                            $(this).html("<button class=\"btn btn-sm btn-primary\"><i class=\"fas fa-binoculars\"></i> " + buttonName + "</button>");
                        });
                    }
                    //set button column

                 },
                 "drawCallback": function () {
                     $("#viewData tr th:first").removeClass("sorting_asc");


                },
                "rowCallback": function (row, data, index) {


                },
                "initComplete": function (settings, json) {
                    appendDeleteButton();
                    var dropdownFieldList = "";
                    $.each(allFields, function (key, value) {
                        dropdownFieldList += "<a class=\"dropdown-item\" href=\"#\" onclick=\"showFieldModal('@Url.Action("_FieldAction","Partial")', '" + value.guid + "','mFieldAction', 'formField','@ViewData["libGuid"]');\"><i class=\"fas fa-edit\"></i> " + value.title + "</a>";
                    });
                    $(".dt-buttons").prepend("<button class=\"btn btn-outline-danger\" tabindex=\"0\" aria-controls=\"viewData\" type=\"button\" data-toggle=\"dropdown\"><i class=\"fa fa-eye\"></i><span> Columns</span></button><div class=\"dropdown-menu dropdown-menu\" role=\"menu\">" + dropdownFieldList + "</div>");
                },
                ajax: '@Url.Action("LoadData", "View")/@ViewData["libGuid"]'
            });

            viewTable.on('column-reorder', function (e, settings, details) {
                $("th.sysdelete").html("<button class=\"btn btn-sm btn-outline-primary\" tabindex=\"0\" type=\"button\" title=\"Save Column Re-Ordering\"  onclick=\"SaveColReorder(this);\"><i class=\"fas fa-save\"></i></button>");
                $('#viewData').DataTable().ajax.reload();
            });

            $(".buttons-create").removeClass("dt-button buttons-create").addClass("btn  btn-outline-primary").html("<i class=\"fa fa-plus\"></i> <span> New Record</span>");
            $(".buttons-print").removeClass("dt-button buttons-print").addClass("btn  btn-outline-secondary").html("<i class=\"fa fa-print\"></i> <span>Print</span>");
            $(".buttons-excel").removeClass("dt-button buttons-excel").addClass("btn  btn-outline-success").html("<i class=\"fas fa-file-excel\"></i> <span>Excel</span>");
            $(".buttons-pdf").removeClass("dt-button buttons-pdf").addClass("btn  btn-outline-danger").html("<i class=\"fas fas fa-file-pdf\"></i> <span>PDF</span>");
        }

        $('#viewData').on('click', '.btn_removerow', function (e) {
            e.preventDefault();
            editor.remove($(this).closest('tr'), {
                title: 'Delete record',
                message: 'Are you sure you wish to remove this record?',
                buttons: 'Delete'
            });
        });

        function SaveColReorder(ctl) {
            var colArray = [];
            $("#viewData thead tr th").each(function () {
                    var colName = $(this)[0].innerText;
                if (colName != "")
                    colArray.push(colName);
                else {
                    var $tdClass = $(this).attr("class").split(' ');
                    var buttonName;
                    $.each($tdClass, function (key, value) {
                        if (value.indexOf("buttonName_") > -1) {
                            buttonName = value.replace("buttonName_", "").replace("_", " ");
                            return false;
                        }
                    });
                    colArray.push(buttonName);
                }
                });
                $.ajax({
                    url: '@Url.Action("ReorderDataTableCol","View")',
                    type: "Get",
                    async: true,
                    datatype: "json",
                    traditional: true,
                    data: { "libraryGuid": " @ViewData["libGuid"]", "fieldList": colArray },
                    beforeSend: function () {
                        $(".dataTables_scrollHeadInner").find("table th.sysdelete").html("<button class=\"btn btn-sm btn-outline-primary\" tabindex=\"0\" type=\"button\" title=\"Processing Please Wait\"><i class=\"fas fa-spinner fa-spin\"></i></button>");
                    },
                    success: function (res) {
                        toastr.success(res.message);
                        $(ctl).remove();
                    },
                    complete: function (data) {
                        $("th.sysdelete").html("");
                    }
                });
        }

        function appendDeleteButton() {
            var colButtun = "";
            if (fieldEditMode == 1) {
                colButtun = "<div class=\"btn-group position-relative headeractionbutton\" style=\"float:right\;position:inherit\">";
                colButtun += "<a href=\"#\" class= \"btn btn-outline-primary btn-sm dropdown-toggle dropdown-hover\" data-toggle=\"dropdown\" onclick=\"setOverflow()\"><i class=\"fa fa-sm fa-edit\"></i></a><div class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">";
                colButtun += "<a class=\"dropdown-item\" href=\"#\" onclick=\"editColumn(this)\"><i class=\"fa fa-edit\"></i> Edit Column</a>";
                colButtun += "<a class=\"dropdown-item\" href=\"#\" onclick=\"showDeleteField(this)\"><i class=\"fa fa-trash\"></i>  Delete Column</a> <div class=\"dropdown-divider\"></div><a class=\"dropdown-item\" href=\"#\" onclick=\"showLinkLibraryModal(this)\"><i class=\"fa fa-link\"></i> Link Other Library</a>";
                colButtun += "</div>";
                $(".dataTables_scrollHeadInner").find("th[class*= 'dt_id_']").append(colButtun);
            }
            if (rowGroup == "") {
                viewTable.rowGroup().disable().draw();
            }
            else {
                viewTable.order.fixed({
                    pre: [defaultSort, sortDirection]
                });
               // $(".dataTables_scrollHeadInner").find("table thead tr:first").remove();
            }
        }

        function setOverflow() {
            $('.dataTables_scroll').on('show.bs.dropdown', function () {
                $('.dataTables_scroll').css("overflow", "inherit");
            });

            $('.dataTables_scroll').on('hide.bs.dropdown', function () {
                $('.dataTables_scroll').css("overflow", "auto");
            })
        }


        function currencyFormat(num) {
            if (isNumeric(num)) {
                var p = parseFloat(num).toFixed(2).split(".");
                return "$" + p[0].split("").reverse().reduce(function (acc, num, i, orig) {
                    return num == "-" ? acc : num + (i && !(i % 3) ? "," : "") + acc;
                }, "") + "." + p[1];

            }else
                return '$0.00'
        }

        function percentageFormat(number, float) {
            if (isNumeric(number)) {
                var percent = parseFloat(number).toFixed(float) + "%";
                return percent;
            }
            else
                return "0%";
        }

        function isNumeric(value) {
            return /^-?\d+$/.test(value);
        }


        function getMapKeyValueByIndex(obj, idx) {
            var key = Object.keys(obj)[idx];
            return obj[key] ;
        }

        function getDataTableColumns() {
            var response = GetAjax('@Url.Action("DataTableColumnDef", "View")', '{"guid": "@ViewData["libGuid"]"}');
            rowGroup = response.rowGroup;
            defaultSort = response.defaultSort;
            sortDirection = response.sortDirection;
            var cols = response.result;
            multilSort = response.multipleSort;
            keysColumn = response.keysColumn;
            allFields = response.allFields;
            return cols;
        }

        function showFieldModal(url, guid, modalId, formId, libraryGuid) {
            $.get(url, { guid:guid,libraryGuid:libraryGuid}, function (res) {
                $("#" + modalId).html(res);
                $("#" + modalId).modal("show");
            });
        }

        function fieldFormAction(form, modalId) {
            var form = $(form);
            form.validate();
            if (form.valid()) {
                 $.ajax(
                    {
                        url: '@Url.Action("_ActionField", "Partial")/@ViewData["libGuid"]',
                         type: 'POST',
                         beforeSend: function () {
                             $("#btn-field-save").html("<i class='fas fa-sync fa-spin'></i> Processing...");
                         },
                        data: $(form).serialize(),
                         success: function (res) {
                            if (res.success) {
                                $("#" + modalId).modal("hide");
                                $('#viewData').DataTable().destroy();
                                $('#viewData').empty();
                                initialDataTable();
                                toastr.success(res.message);
                            }
                            else {
                                toastr.error(res.message);
                            }
                        }
                    }
                )
            }
            return false;// make form doesn't post back. Force submit form by ajax post
        }

        function GetAjax(url, data) {
            var result;
            $.ajax({
                url: url,
                type: "Get",
                async: false,
                datatype: "json",
                data: JSON.parse(data),
                success: function (res) {
                    result = res;
                }
            })
            return result;
        }

        function getFieldByLookupTable(ctr) {
            $this = $("#" + ctr);
            $this.empty();
            var fieldList = GetAjax("@Url.Action("_ActionField", "Partial")",'{"libraryGuid": "@ViewData["libGuid"]"}').result;
            $this.append($('<option/>', {
                value: 0,
                text: "Select a Link Field"
            }));
            $.each(fieldList, function (index, itemData) {
                $this.append($('<option/>', {
                    value: itemData.guid,
                    text: itemData.title
                }));
            });
        }

        function editColumn(ctr) {
            var $colClass = $(ctr).closest("th").attr("class").split(' ');
            var fieldGuid;
                $.each($colClass, function (key, value) {
                    if (value.indexOf("dt_id_") > -1) {
                        fieldGuid = value.replace("dt_id_","");
                        return false;
                    }
            });
            showFieldModal('@Url.Action("_FieldAction","Partial")', fieldGuid,'mFieldAction', 'formField','@ViewData["libGuid"]');
        }

        var fieldGuid;
        function showDeleteField(ctr) {
            var $colClass = $(ctr).closest("th").attr("class").split(' ');
            $.each($colClass, function (key, value) {
                if (value.indexOf("dt_id_") > -1) {
                    fieldGuid = value.replace("dt_id_", "");
                    return false;
                }
            });
            $("#modelDeleteFieldConfirm").modal("show");
        }

        function doDeleteField(ctr) {
            $.getJSON('@Url.Action("DeleteLibraryField","Partial")',
                { guid: fieldGuid, libraryGuid : '@ViewData["libGuid"]' }
                , function (res) {
                if (res.success) {
                    $("#modelDeleteFieldConfirm").modal("hide");
                    $('#viewData').DataTable().destroy();
                    $('#viewData').empty();
                    initialDataTable();
                    toastr.success(res.message);
                }
                else {
                    toastr.error(res.message);
                }
                });
        }

        function showLinkLibraryModal(ctr) {
            var $colClass = $(ctr).closest("th").attr("class").split(' ');
            $.each($colClass, function (key, value) {
                if (value.indexOf("dt_id_") > -1) {
                    fieldGuid = value.replace("dt_id_", "");
                    return false;
                }
            });

            $.get('@Url.Action("_LinkToLibrary","Partial")', { fieldGuid: fieldGuid, libraryGuid: "@ViewData["libGuid"]" }, function (res) {
              $("#divLinkBody").html(res);
            });
            $("#modelLinkLibrary").modal("show");
        }

        function viewLinkLibrary() {
            fieldGuid = CreateGuid();//if no field is selected to view the link library just create the random GUID so the code won't crash
            $.get('@Url.Action("_LinkToLibrary","Partial")', { fieldGuid: fieldGuid, libraryGuid: "@ViewData["libGuid"]" }, function (res) {
              $("#divLinkBody").html(res);
            });
            $("#modelLinkLibrary").modal("show");
        }

        function AddLinkToLibrary() {
            var currentField = $("#SetField").val();
            var linkLibrary = $("#LinkToLibrary").val();
            var dependentField = $("#DependentFields").val();
            var linkLibraryName = $("#LinkToLibrary option:selected").text().split("/").pop();
                $.getJSON("@Url.Action("InsertLinkLibrary","View")", {
                    field: currentField,
                    linkLibrary: linkLibrary,
                    dependentField: dependentField,
                    linkLibraryName: linkLibraryName
                }, function (res) {
                if (res.status) {
                    $('#viewData').DataTable().destroy();
                    $('#viewData').empty();
                    initialDataTable();
                    $('#linkLibrary').DataTable().ajax.reload();
                    toastr.success(res.message);
                }
                else {
                    toastr.error(res.message);
                }
            });
            return false;
        }


        function getFieldByLookupTable(ctr) {
            $ctr = $(ctr);

            $.getJSON("@Url.Action("GetFieldsByLibrary","View")", { libraryGuid: $ctr.val() }, function (res) {
                if (res.status) {
                    $("#DependentFields").empty();
                    $.each(res.result, function (key, object) {
                        var $option;

                        //$.each(object, function (id, value) {
                            $option = $("<option/>", {
                                value: $(object)[0].guid,
                                text:$(object)[0].title
                           });
                        //});
                       // console.log(value);

                        $("#DependentFields").append($option);
                    });
                }
                else {
                    toastr.error("Failed to load Fields for Library");
                }

            });
        }

        function removeLinkLibrary(fieldGuid) {
            if (confirm("Are you sure you want to delete this Link Library?")) {
                $.getJSON('@Url.Action("DeleteLinkLibrary","View")', { fieldGuid: fieldGuid }, function (res) {
                    if (res.status) {
                        toastr.success(res.message);
                        $('#linkLibrary').DataTable().ajax.reload();
                    }
                    else {
                        toastr.error(res.message);
                    }
                });
            }
        }

        function setEditFieldMode() {
            $(".btnAjaxWait").show();
            if (fieldEditMode == 0) {
                $("#editFieldMode").empty().html("<i class=\"fas fa-cog\"></i> Cancel Edit Field Mode");
                colReorder = true;
                fieldEditMode = 1;
                $(".btnCancelEditMode").show();
            }
            else if (fieldEditMode == 1) {
                $("#editFieldMode").empty().html("<i class=\"fas fa-cog\"></i> Edit Field Mode");
                $(".dataTables_scrollHeadInner").find("table thead").append("<tr class=\"row\"></tr>");
                colReorder = false;
                fieldEditMode = 0;
                $(".btnCancelEditMode").hide();
            }
            $('#viewData').DataTable().destroy();
            $('#viewData').empty();
            initialDataTable();
        }

        var FormularView = "";
        var FormularRaw = "";
        var baseFormular = "";
        function setFormularFunction() {
          
            //if ($("#ddlFormularOper :selected").text()!="")
            //    baseFormular = $("#ddlFormularFunc :selected").text() + "([" + $("#ddlFormularOper :selected").text() + "]";
            //else
            if ($("#ddlFormularFunc :selected").text() == "=()")
                baseFormular = $("#ddlFormularFunc :selected").text() + "";
            else
                baseFormular = $("#ddlFormularFunc :selected").text() + "(";

            $("#FormularView").val(baseFormular);
            $("#Formular").val(baseFormular);
            
        }

        function setFormularOper() {
            if ($("#ddlFormularOper :selected").text() != "") {
                if ($("#ddlFormularFunc :selected").text() == "=()") //Custom formular
                {
                    $("#FormularView").val($("#FormularView").val() + $("#ddlFormularOper :selected").text() + "");
                    $("#Formular").val($("#Formular ").val() + $("#ddlFormularOper").val());
                }
                else {
                    //FormularView = $("#FormularView").val() + $("#ddlFormularOper :selected").text();
                    $("#FormularView").val($("#FormularView").val() + "[" + $("#ddlFormularOper :selected").text() + "]");
                    $("#Formular").val($("#Formular").val() + "[" + $("#ddlFormularOper :selected").text() + "]");
                }
            }       
        }
     
        //=() || [Formular_Definition]
        //Function ([Source Data]|LibraryGuid.FieldGuid],[Target_LibraryGuid.Target_FieldGuid])

        function updateForumlar() {
            if ($("#ddlFormularFunc :selected").text() == "=()")
            {
                FormularView = "[" + $("#FormularLibraryGuid :selected").text() + "." + $("#CalculatedField :selected").text() + "]";
                FormularView = $("#FormularView").val() + FormularView;
                $("#FormularView").val(FormularView.replaceAll(")[", ",["));

                FormularRaw = "[" + $("#CalculatedField :selected").val() + "]";
                FormularRaw = $("#Formular").val() + FormularRaw;
                $("#Formular").val(FormularRaw); 
                console.log(FormularRaw);
            }
            else
            {
                FormularView = "[" + $("#FormularLibraryGuid :selected").text() + "." + $("#CalculatedField :selected").text() + "])";
                FormularView = $("#FormularView").val() + FormularView;
                $("#FormularView").val(FormularView.replaceAll(")[", ",["));

                FormularRaw = "[" + $("#CalculatedField :selected").val() + "])";
                FormularRaw = $("#Formular").val() + FormularRaw;
                $("#Formular").val(FormularRaw.replaceAll(")[", ",["));          
            }
           
        }

        function resetFormular() {
            $("#FormularView").val("");
            $("#Formular").val();
        }

        function getFieldByLibrary(libraryCTR,fieldCTR) {
            $.getJSON("@Url.Action("GetFieldsByLibrary","View")", { libraryGuid: $(libraryCTR).val() }, function (res) {
                if (res.status) {
                    $("#" + fieldCTR).empty();
                    $.each(res.result, function (key, object) {
                        var $option;
                        //$.each(object, function (id, value) {
                            $option = $("<option/>", {
                                value: $(object)[0].guid,
                                text:$(object)[0].title
                           });
                        //});
                       // console.log(value);
                        $("#" + fieldCTR).append($option);
                    });
                }
                else {
                    toastr.error("Failed to load Fields for Library");
                }
            });
        }
    </script>
}
