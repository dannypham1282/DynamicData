@model DynamicData.Models.User

<div class="card card-default">
    <div class="card-header card-warning card-outline">
        <h3 class="card-title" id="viewCardTitle">
            Users
        </h3>
        <div class="card-tools">
            @*<button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                    <i class="fas fa-minus"></i>
                </button>
                <button type="button" class="btn btn-tool" data-card-widget="remove" title="Remove">
                    <i class="fas fa-times"></i>
                </button>*@
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-12">
                <table id="UserTable" class="table table-striped table-bordered" cellspacing="0" width="100%">
                    <thead><tr></tr></thead>
                </table>
                <table>
                    <tr><td height="10" width="10" class="editdisable" style="padding:0.1rem"></td><td width="5"></td><td><b> *note: none edit cell</b></td><td></td><td height="10" width="10" class="editdisable"></td></tr>
                </table>
            </div>

        </div>
    </div>

    <div class="modal fade" id="modelUpdateUserPassword" aria-modal="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Update Password</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="divUpdatePassword">
                    <div class="alert alert-danger alert-dismissible">

                        this is dangerous
                    </div>
                    <div class="form-group">
                        <label for="exampleInputEmail1">Password</label>
                        <input type="password" class="form-control" id="txtPassword" placeholder="Enter Password">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" onclick="updatePassword()">Update Password</button>
                    <button type="button" class="btn btn-outline-danger" data-dismiss="modal">Close</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>

    <div class="modal fade" id="modelUpdateUserRole" aria-modal="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Update User Roles</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="divUpdateUserRole">
                    <div class="alert alert-danger alert-dismissible">
                    </div>
                    <div class="form-group">
                        <h5>Roles</h5>
                        <hr />
                        <br />

                        @foreach (var item in ViewData["RoleCollection"] as IEnumerable<DynamicData.Models.Role>)
                        {
            <input type="checkbox" value="@item.ID" name="cbRoles" id="cbRole" /> <label for="cbRole"> &nbsp;@item.Name</label> <br />}

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" onclick="updateUserRole()">Update User Role</button>
                    <button type="button" class="btn btn-outline-danger" data-dismiss="modal">Close</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>


</div>
@section scripts {
    <script>
        $(document).ready(function () {
            $.fn.dataTable.moment('MM/DD/YYYY');
            $.fn.dataTable.moment('D-MMM-YY');
            initialDataTable();
         //  console.log(@ViewData["RoleCollection"]);
        });

        var editCellUrl = "@Url.Action("UpdateUserCell","Admin")";
        function initialDataTable() {
                $('#UserTable thead tr').empty();
              editor = new $.fn.dataTable.Editor({
                ajax:
                {
                    dataType: 'json',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    create: {
                        type: 'POST',
                        url: editCellUrl,
                        success: function (res) {
                            if (res.status) {
                                toastr.success(res.message);
                                $('#UserTable').DataTable().ajax.reload();
                            }
                        }
                    },
                      edit: {
                        type: 'POST',
                              url: editCellUrl,
                              data: function(data) {
                                //  console.log(data)
                              },
                          success: function (res) {

                              if (res.status != 'noaction') {
                                  if (res.status) {
                                      $('#UserTable').DataTable().ajax.reload();
                                      toastr.success(res.message);
                                  }
                                  else {
                                      toastr.error(res.message);
                                  }
                              }
                        }
                    },
                    remove: {
                        type: 'POST',
                        url: editCellUrl,
                        success: function (res) {
                            $('#UserTable').DataTable().ajax.reload();
                            toastr.success(res.message);
                        }
                    },
                },
                idSrc: 'id',
                  table: "#UserTable",
                  fields: [
                      {
                          label: "UserName:",
                          name: "username",

                      },{
                      label: "First Name:",
                      name: "firstname"
                  }, {
                      label: "Last name:",
                          name: "lastname"
                  }, {
                      label: "Email Address:",
                          name: "email"
                  }, {
                      label: "Phone:",
                        name: "phone"
                      }
                  ]
              });


                UserTable = $('#UserTable').DataTable({
                //fixedHeader: true,
                scrollY:650,
                //colReorder: colReorder,
                //"ordering": isSorted,
                "ordering": true,
                //stateSave: true,
                "aLengthMenu": [[25, 50, 100, -1], [ 25, 50, 100, "All"]],
                "language": {
                    "emptyTable": "No data available in table"
                },
                dom: "Blfrtip",
                    columns: [
                        {
                            data: "id",
                            orderable: false,
                            render: function (data, type, row, meta) {
                                var checkRoles = "";
                                $.each(row.userroles, function (key, value) {
                                    checkRoles += value.id + ",";
                                });
                                var dropList = "<div class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">";
                                dropList += "<a class=\"dropdown-item\" href=\"#\" ><i class=\"fas fa-list\" ></i> Organization</a>";
                                dropList += "<a class=\"dropdown-item\" href=\"#\" onclick=\"showUpdateUserRole('" + data + "','" + checkRoles + "')\" ><i class=\"fas fa-user-tag\" ></i> Roles</a>";
                                dropList += "<div class=\"dropdown-divider\"></div>";
                                dropList += "<a class=\"dropdown-item\" href=\"#\" onclick=\"showUpdatePasswordModal('" + data + "')\"><i class=\"fas fa-key\" ></i> Update Password</a>";
                                dropList += "<a class=\"dropdown-item btn_removerow\" href=\"#\" onclick=\"deleteUser(this)\"><i class=\"fas fa-trash\" ></i> Delete</a>";
                                dropList +="</div>";
                                return "<button type=\"button\" class=\"btn btn-outline-danger btn-sm dropdown-toggle dropdown-hover\" data-toggle=\"dropdown\" aria-expanded=\"true\"><i class=\"fa fa-sm fa-list\"></i> Action</button>" + dropList;
                            },
                            width:70
                        },
                        { title:"UserName",data: "username" },
                        { title: "First Name",data: "firstname" },
                        { title: "LastName",data: "lastname" },
                        { title: "Email Address",data: "email" },
                        { title: "Phone", data: "phone" },
                        {
                            title: "Roles", "data": "userroles[, ].name", "autoWidth": true, className:"editdisable"
                        }

                    ],
                keys: {
                   // columns: ':not(:first-child):not(:nth-child(2))',
                    columns: ':not(:first-child):not(:nth-child(7))',
                    editor: editor
                },
                aaSorting: [[1,"asc"]],

                select: {
                    style: 'os',
                    selector: 'td:first-child',
                    blurable: true
                 },
                buttons: [
                    {
                        extend: "print",
                        exportOptions: {
                            columns: ':visible:not(:first-child)',
                            format: {
                                header: function (data, columnIdx) {
                                    if (columnIdx == 1) {
                                        return 'column_1_header';
                                    }
                                    else {
                                        return data;
                                    }
                                }
                            }
                            // columns: 'th:not(:last-child)'
                        }
                    },
                    {
                        extend: "pdfHtml5",
                        orientation: 'landscape',
                        pageSize: 'LEGAL',
                        exportOptions: {
                            columns: ':visible:not(:first-child)',
                            format: {
                                header: function (data, columnIdx) {
                                    if (columnIdx == 1) {
                                        return 'column_1_header';
                                    }
                                    else {
                                        return data;
                                    }
                                }
                            }
                            // columns: 'th:not(:last-child)'
                        }
                    },
                    ,
                    {
                        extend: "excel",
                        exportOptions: {
                            columns: ':visible:not(:first-child)',
                            format: {
                                header: function (data, columnIdx) {
                                    if (columnIdx == 1) {
                                        return 'column_1_header';
                                    }
                                    else {
                                        return data;
                                    }
                                }
                            }
                            // columns: 'th:not(:last-child)'
                        }
                    },

                    { extend: "create", editor: editor },

                 ],
                "createdRow": function (row, data, index) {
                    //set button column

                 },
                 "drawCallback": function () {
                     $("#viewData tr th:first").removeClass("sorting_asc");
                },
                "rowCallback": function (row, data, index) {


                },
                "initComplete": function (settings, json) {

                },
                ajax: '@Url.Action("LoadUsersData", "Admin")',
            });



            $(".buttons-create").removeClass("dt-button buttons-create").addClass("btn  btn-outline-primary").html("<i class=\"fa fa-plus\"></i> <span> New Record</span>");
            $(".buttons-print").removeClass("dt-button buttons-print").addClass("btn  btn-outline-secondary").html("<i class=\"fa fa-print\"></i> <span>Print</span>");
            $(".buttons-excel").removeClass("dt-button buttons-excel").addClass("btn  btn-outline-success").html("<i class=\"fas fa-file-excel\"></i> <span>Excel</span>");
            $(".buttons-pdf").removeClass("dt-button buttons-pdf").addClass("btn  btn-outline-danger").html("<i class=\"fas fas fa-file-pdf\"></i> <span>PDF</span>");

        }

        function deleteUser(ctr) {
            console.log($(ctr).closest("tr"));
            editor.remove($(ctr).closest("tr"), {
                title: 'Delete record',
                message: 'Are you sure you wish to remove this record?',
                buttons: 'Delete'
            });
        }

            var selectedUserId;
            function showUpdatePasswordModal(userId) {
                selectedUserId = userId;
                $("#txtPassword").val("");
                $(".alert").hide();
                $("#modelUpdateUserPassword").modal("show");
            }


        function showUpdateUserRole(userId, userroles) {
            selectedUserId = userId;
            var roles = userroles.split(',').filter(function (e) { return e != ""; });;
            console.log(roles)
            $('[name="cbRoles"]').each(function () {
                $(this).prop("checked", ($.inArray($(this).val(), roles) != -1));
            });
            $(".alert").hide();

            $("#modelUpdateUserRole").modal("show");
        }

        function updateUserRole() {
            var roles = $("#cbRole:checked").map(function () {
                return this.value;
            }).get().join(",");

            $.getJSON("@Url.Action("UpdateUserRoles", "Admin")", { userId: selectedUserId, roles: roles }, function (res) {
                if (res.status) {
                    $('#UserTable').DataTable().ajax.reload();
                    toastr.success(res.message);
                }
                else {
                    toastr.error(res.message);
                }
            });
        }

            function updatePassword() {
                var password = $("#txtPassword").val();
                if (password == "") {
                    $(".alert").show().html("Please enter password");

                }
                else {
                      $.getJSON("@Url.Action("UpdateUserPassword","Admin")", { userId: selectedUserId, password: password }, function (res) {
                        if (res.status) {
                           // $('#UserTable').DataTable().ajax.reload();
                            $("#modelUpdateUserPassword").modal("hide");
                            toastr.success(res.message);
                        }
                    });
                }
            }

    </script>
}
